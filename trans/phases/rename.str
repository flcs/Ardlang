module analysis/rename

imports 
	include/Ardlang
	namespaces
	namespacelib
	signatures

strategies	

rename-all = alltd(rename)

rules

	rename-nothing: d@Program(_,_,_,_,_) -> d

	// Rename program
	rename:
	 Program(pinconfig, aliases, globals, externals, codes) 
			 -> Program(pinconfig' , aliases' ,globals', externals, codes') 
		 where new-scope(
			 <rename-all> pinconfig => pinconfig';
			 <rename-all> aliases => aliases';
			 <rename-all> globals => globals';
		  	 <rename-all> codes => codes'
		 ) 
	
	// Rename code blocks
	// Scoping is disabled as it hides declarations outside the scope
	// And thus it constantly overwrites the variables in outer scopes, which is wrong
	rename: Repeat(statements) -> Repeat(uniquename, statements')
		where new-scope(
			<rename-declaration(|Codes())> <newname> "repeat" => uniquename;
			<rename-all> statements => statements'
		)
		
	rename: DoOnce(statements) -> DoOnce(uniquename, statements')
		where new-scope(
			<rename-declaration(|Codes())> <newname> "doonce" => uniquename;
			<rename-all> statements => statements'
		)
		
	rename: FuncDecl(name, args, statements) -> FuncDecl(name, args', statements')
		where new-scope(
			<map(rename-args)> args => args';
			<rename-all> statements => statements'
			//<store-proposal-candidates(|Vars())> name
		)

	rename: If(cond, statements) -> If(cond', statements')
		where (
			<rename-all> cond => cond';
			new-scope(
				<rename-all> statements => statements'
			)
		)
		
	rename: IfElse(cond, ifStatements, elseStatements) -> IfElse(cond', ifStatements', elseStatements')
		where (
			<rename-all> cond => cond'; 
			new-scope(
				<rename-all> ifStatements => ifStatements'
			);
			new-scope(
				<rename-all> elseStatements => elseStatements'
			)
		)	
		
	rename: For(index, from, to, step, statements) -> For(index', from', to', step', statements')
		where (
			<rename-all> from => from';
			<rename-all> to => to';
			<rename-all> step => step';
			new-scope(
				<rename-declaration(|Vars())> index => index';
				<rename-all> statements => statements'
			)
		)
		
	rename: While(cond, statements) -> While(cond', statements')
		where (
			<rename-all> cond => cond';
			new-scope(
				<rename-all> statements => statements'
			)
		)
	 
	rename-args: ParamDecl(name) -> ParamDecl(name')
		where
			<rename-declaration(|Vars())> name => name'
			
	rename: PinName(name) -> PinName(name')
		where
			<rename-declaration(|Vars())> name => name';
			<store-proposal-candidates(|Vars())> name'
			
	rename: VarRef(name) -> VarRef(name')
		where
			<rename-reference(|Vars())> name => name'

	rename: PinRef(name) -> PinRef(name')
		where
			<rename-reference(|Vars())> name => name'

	/*// First occurence of var
	rename: Configuration(Mode(mode), PinName(name), number) -> Configuration(Mode(mode), PinName(name'), number) 
		where
			<rename-declaration(|Vars())> name => name'
	*/
	rename: VarDecl(name,value) -> VarDecl(name', value')
		where
			<rename-all> value => value';
			<rename-declaration(|Vars())> name => name';
			<store-proposal-candidates(|Vars())> name'

	// Other occurences
	rename: Assignment(name,exp) -> Assignment(name', exp')
		where
			<rename-all> exp => exp';
			<rename-reference(|Vars())> name => name'
	
	
	rename: FuncCallNoArgs(name) -> VarRef(name')
		where
			<rename-reference(|Vars())> name => name'

