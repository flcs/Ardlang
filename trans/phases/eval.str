module normal/eval

imports
	include/Ardlang
	signatures
	project
	
strategies
	eval-all =  innermost(eval); topdown(try(flatten-switch))
	
rules // Evaluate units
	flatten-switch: term -> <flatten-list> term
	
	//
	// Time units
	//
	eval: Time(x) -> Int(value)
	where
		<time-unit> x => value
	
	//
	// PWM
	//
	eval: PWM(percentage) -> Plus(Int("2"), Divide(Times(percentage, Int("250")), Int("100")))	

	//
	// Analog pins
	//
	eval: Ax -> pinNr
	where (
		<split-after> (Ax, "A") => y;
		<Snd> y => value;
		<addS> (value, "54") => pinNr
	)

	//
	// Convert a switch to multiple sets
	//
	eval: Switch(AliasStateRef(AliasRef(alias), state)) -> stats
		where
			<project-pinrefs><get-alias>alias => pinrefs;
			<project-pinvalues><get-state> (alias,state) => pinvalues;
			<map(create-set)><zip>(pinrefs,pinvalues) => stats
		
		
	create-set: (ref,value) -> FuncCall("set",[ref,value])
	
	//
	// succeeds if the term is a valid time (value + 'ms'/'s'/'min'/'h') and returns the corresponding time in ms
	time-unit: 
		x -> value'
		where (
			<split-before> (x, "ms") => y;
			<eq> (<Snd> y, "ms");
			<Fst> y => value;
			<mulS> (value, "1") => value'
		)
	time-unit: 
		x -> value'
		where (
			<split-before> (x, "s") => y;
			<eq> (<Snd> y, "s");
			<Fst> y => value;
			<mulS> (value, "1000") => value'
		)
	time-unit: 
		x -> value'
		where (
			<split-before> (x, "min") => y;
			<eq> (<Snd> y, "min");
			<Fst> y => value;
			<mulS> (value, "60000") => value'
		)
	time-unit: 
		x -> value'
		where (
			<split-before> (x, "h") => y;
			<eq> (<Snd> y, "h");
			<Fst> y => value;
			<mulS> (value, "3600000") => value'
		)		
		
	
	

 	 
 	 